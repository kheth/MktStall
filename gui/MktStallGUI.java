
package mktstall;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.CountDownLatch;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


public class MktStallGUI extends javax.swing.JFrame implements ActionListener, ListSelectionListener {


    /**
     * Creates new form MktStallGUI
     * @param e
     */
    public MktStallGUI(Engine e) {
        this.configMap = new HashMap<>();
        this.indexHistory = new ArrayList<>();
        LookAndFeel.initLookAndFeel();
        this.engine = e;
        this.fileChooser = new JFileChooser();
        this.pythonChooser = new JFileChooser();
        this.settings = new Settings();
        this.settingsDialog = new SettingsDialog(this, true, settings);
        initComponents();
        initBrowserPanels();
        this.initColourPalet();
        initOther();
    }

    public final void initOther(){
        
        this.engine.setActionListener(this);
        this.engine.setUserInfoArea(this.UserInfo);
        this.engine.setSettings(settings);
        this.engine.setProcessPDFS(new ProcessPDFS(settings, this));
        this.settingsDialog.loadSettings();
        this.addWindowListener(new WindowAdapter(){
                @Override
                public void windowClosing(WindowEvent e){
                    killSignal();
                }
        });
    }
    
    private void killSignal(){
        int n = JOptionPane.showConfirmDialog(tabbedPane, "Quit mktStall?",
                "Quit", JOptionPane.YES_NO_OPTION);
        if(n == JOptionPane.YES_OPTION){
            engine.killSignal();
            System.exit(0);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        UserInfo = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        runButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        OrganSelection = new javax.swing.JComboBox<>();
        jToolBar2 = new javax.swing.JToolBar();
        backButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        jSplitPane5 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        navigationTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        ViewOne = new javax.swing.JPanel();
        ViewTwo = new javax.swing.JPanel();
        ViewThree = new javax.swing.JPanel();
        ViewFour = new javax.swing.JPanel();
        ViewFive = new javax.swing.JPanel();
        ViewSix = new javax.swing.JPanel();
        ViewSeven = new javax.swing.JPanel();
        ViewEight = new javax.swing.JPanel();
        ViewNine = new javax.swing.JPanel();
        ViewTen = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        StartMenuItem = new javax.swing.JMenuItem();
        OpenResults = new javax.swing.JMenuItem();
        settingsMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MktStall");
        setBackground(new java.awt.Color(7, 54, 68));

        jSplitPane3.setDividerLocation(200);
        jSplitPane3.setDividerSize(2);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane4.setDividerSize(2);

        progressBar.setForeground(new java.awt.Color(0, 255, 204));

        UserInfo.setEditable(false);
        UserInfo.setColumns(20);
        UserInfo.setLineWrap(true);
        UserInfo.setRows(5);
        UserInfo.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jScrollPane2.setViewportView(UserInfo);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane4.setRightComponent(jPanel6);

        jToolBar1.setRollover(true);
        jToolBar1.add(filler1);
        jToolBar1.add(filler2);

        runButton.setBackground(new java.awt.Color(0, 102, 0));
        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mktstall/button_run_square.png"))); // NOI18N
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setIconTextGap(2);
        runButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        runButton.setOpaque(true);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(runButton);

        jButton4.setBackground(new java.awt.Color(0, 102, 0));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mktstall/button_load_square.png"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setIconTextGap(2);
        jButton4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        OrganSelection.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        OrganSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LEAF", "SEED", "POD" }));
        OrganSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrganSelectionActionPerformed(evt);
            }
        });
        jToolBar1.add(OrganSelection);

        jToolBar2.setRollover(true);

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mktstall/Back16.gif"))); // NOI18N
        backButton.setFocusable(false);
        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(backButton);

        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mktstall/Forward16.gif"))); // NOI18N
        forwardButton.setFocusable(false);
        forwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        forwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(forwardButton);

        jButton1.setText("A");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setOpaque(true);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton1);

        jButton2.setText("B");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton2);

        jButton3.setText("C");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton3);

        jToolBar3.setRollover(true);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
            .addComponent(jToolBar3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jSplitPane4.setLeftComponent(jPanel4);

        jSplitPane3.setTopComponent(jSplitPane4);

        jSplitPane5.setBackground(new java.awt.Color(7, 54, 66));
        jSplitPane5.setDividerLocation(250);
        jSplitPane5.setDividerSize(8);

        navigationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Navigation", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        navigationTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(navigationTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane5.setLeftComponent(jPanel5);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 1, true));

        tabbedPane.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N

        ViewOne.setAutoscrolls(true);

        javax.swing.GroupLayout ViewOneLayout = new javax.swing.GroupLayout(ViewOne);
        ViewOne.setLayout(ViewOneLayout);
        ViewOneLayout.setHorizontalGroup(
            ViewOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewOneLayout.setVerticalGroup(
            ViewOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Method", ViewOne);

        javax.swing.GroupLayout ViewTwoLayout = new javax.swing.GroupLayout(ViewTwo);
        ViewTwo.setLayout(ViewTwoLayout);
        ViewTwoLayout.setHorizontalGroup(
            ViewTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewTwoLayout.setVerticalGroup(
            ViewTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Margin", ViewTwo);

        javax.swing.GroupLayout ViewThreeLayout = new javax.swing.GroupLayout(ViewThree);
        ViewThree.setLayout(ViewThreeLayout);
        ViewThreeLayout.setHorizontalGroup(
            ViewThreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewThreeLayout.setVerticalGroup(
            ViewThreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Morphological", ViewThree);

        javax.swing.GroupLayout ViewFourLayout = new javax.swing.GroupLayout(ViewFour);
        ViewFour.setLayout(ViewFourLayout);
        ViewFourLayout.setHorizontalGroup(
            ViewFourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewFourLayout.setVerticalGroup(
            ViewFourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Shape", ViewFour);

        javax.swing.GroupLayout ViewFiveLayout = new javax.swing.GroupLayout(ViewFive);
        ViewFive.setLayout(ViewFiveLayout);
        ViewFiveLayout.setHorizontalGroup(
            ViewFiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        ViewFiveLayout.setVerticalGroup(
            ViewFiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tabbedPane.addTab("SUMMARY - table", ViewFive);

        javax.swing.GroupLayout ViewSixLayout = new javax.swing.GroupLayout(ViewSix);
        ViewSix.setLayout(ViewSixLayout);
        ViewSixLayout.setHorizontalGroup(
            ViewSixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewSixLayout.setVerticalGroup(
            ViewSixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("SUMMARY - pixels", ViewSix);

        javax.swing.GroupLayout ViewSevenLayout = new javax.swing.GroupLayout(ViewSeven);
        ViewSeven.setLayout(ViewSevenLayout);
        ViewSevenLayout.setHorizontalGroup(
            ViewSevenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewSevenLayout.setVerticalGroup(
            ViewSevenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("SUMMARY - cm", ViewSeven);

        javax.swing.GroupLayout ViewEightLayout = new javax.swing.GroupLayout(ViewEight);
        ViewEight.setLayout(ViewEightLayout);
        ViewEightLayout.setHorizontalGroup(
            ViewEightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewEightLayout.setVerticalGroup(
            ViewEightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Links", ViewEight);

        javax.swing.GroupLayout ViewNineLayout = new javax.swing.GroupLayout(ViewNine);
        ViewNine.setLayout(ViewNineLayout);
        ViewNineLayout.setHorizontalGroup(
            ViewNineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewNineLayout.setVerticalGroup(
            ViewNineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("", ViewNine);

        javax.swing.GroupLayout ViewTenLayout = new javax.swing.GroupLayout(ViewTen);
        ViewTen.setLayout(ViewTenLayout);
        ViewTenLayout.setHorizontalGroup(
            ViewTenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        ViewTenLayout.setVerticalGroup(
            ViewTenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        tabbedPane.addTab("", ViewTen);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );

        jSplitPane5.setRightComponent(jPanel3);

        jSplitPane3.setRightComponent(jSplitPane5);

        jMenu1.setText("File");

        StartMenuItem.setText("Run...");
        StartMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(StartMenuItem);

        OpenResults.setText("Open...");
        OpenResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenResultsActionPerformed(evt);
            }
        });
        jMenu1.add(OpenResults);

        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(settingsMenuItem);

        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(quitMenuItem);

        menuBar.add(jMenu1);

        jMenu2.setText("Edit");
        menuBar.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        menuBar.add(jMenu3);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.Alignment.LEADING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String organ = (String) this.OrganSelection.getSelectedItem();
        if(organ.equalsIgnoreCase("LEAF")){
            if(this.currentlySelectedConfig != null){
                int index = this.tabbedPane.getSelectedIndex();
                String url = "";
                LeafResultsConfigResults currentlySelected = (LeafResultsConfigResults) this.currentlySelectedConfig;
                switch (index) {
                    case 0:
                        url = currentlySelected.get_html_method_path();
                        break;
                    case 1:
                        url = currentlySelected.get_html_margin_path();
                        break;
                    case 2:
                        url = currentlySelected.get_html_morphological_path();
                        break;
                    case 3:
                        url = currentlySelected.get_html_shape_path();
                        break;
                    case 4:
                        url = currentlySelected.get_html_summary_table_path();
                        break;
                    case 5:
                        url = currentlySelected.getHtml_boxplot_pixels_path();
                        break;
                    case 6:
                        url =  currentlySelected.getHtml_boxplot_cm_path();
                        break;
                    default:
                        this.UserInfo.append("Unable to launch selected file in browser.");
                        break;
                }
                File htmlFile = new File(url);
                try {
                    Desktop.getDesktop().browse(htmlFile.toURI());
                } catch (IOException ex) {
                    Logger.getLogger(MktStallGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if(organ.equalsIgnoreCase("SEED")){
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.out.println("mktstall.MktStallGUI.jButton2ActionPerformed()");
        this.updatePage_TAB_TWO("https://www.bing.com");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.out.println("mktstall.MktStallGUI.jButton3ActionPerformed()");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void enableGUIElements(boolean enable){
        this.progressBar.setIndeterminate(!enable);
        this.runButton.setEnabled(enable);
        this.OrganSelection.setEnabled(enable);
    }
    
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if(this.OrganSelection.getSelectedItem() == "LEAF"){
            this.enableGUIElements(false);
            this.engine.runLeaf();
        }
        if(this.OrganSelection.getSelectedItem() == "SEED"){
            System.out.println("DOING SEED - RUN BUTTON CLICKED");
            this.enableGUIElements(false);
            this.engine.runSeed();
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        this.settingsDialog.setVisible(true);
    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void OrganSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrganSelectionActionPerformed
        String selected = (String)this.OrganSelection.getSelectedItem();
        this.settings.setOrgan(selected);
        this.settings.loadSettingsConfig();
        System.out.println("Selected organ: "+selected);
        if(selected.equalsIgnoreCase("LEAF")){  
            this.tabbedPane.setTitleAt(1, "Margin");
            this.tabbedPane.setTitleAt(2, "Morphological");
            this.tabbedPane.setTitleAt(3, "Shape");
            this.tabbedPane.setTitleAt(4, "SUMMARY - table");
            this.tabbedPane.setTitleAt(5, "SUMMARY - pixels");  
            this.tabbedPane.setTitleAt(6, "SUMMARY - cm");
            this.tabbedPane.setTitleAt(7, "tab 8");
            this.tabbedPane.setTitleAt(8, "tab 9");
            this.tabbedPane.setTitleAt(9, "tab 10");
        }
        if(selected.equalsIgnoreCase("SEED")){
            this.tabbedPane.setTitleAt(1, "Accession - table");
            this.tabbedPane.setTitleAt(2, "Accession Area Plot");
            this.tabbedPane.setTitleAt(3, "Accession  Perimeter Plot");
            this.tabbedPane.setTitleAt(4, "Accession EqD Plot");
            this.tabbedPane.setTitleAt(5, "Summary Table");
            this.tabbedPane.setTitleAt(6, "Summary Area Plot");
            this.tabbedPane.setTitleAt(7, "Summary Perimeter Plot");
            this.tabbedPane.setTitleAt(8, "Summary EqD Plot");
            this.tabbedPane.setTitleAt(9, "Summary Number of Seeds");
            
        }
     
    }//GEN-LAST:event_OrganSelectionActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        this.killSignal();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void StartMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartMenuItemActionPerformed
        this.runButtonActionPerformed(evt);
    }//GEN-LAST:event_StartMenuItemActionPerformed

    private void OpenResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenResultsActionPerformed
        this.settingsDialog.setVisible(true);
        this.enableGUIElements(false);
        this.progressBar.setIndeterminate(true);
        this.processResults();        
        this.progressBar.setIndeterminate(false);
        this.enableGUIElements(true);
    }//GEN-LAST:event_OpenResultsActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.OpenResultsActionPerformed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.back();
    }//GEN-LAST:event_backButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        this.forward();
    }//GEN-LAST:event_forwardButtonActionPerformed

    public void updatePage_TAB_ONE(String page){
        Platform.runLater(() -> {
            browserOne.setPage(page);
        });
    }
    
    public void updatePage_TAB_TWO(String page){
        Platform.runLater(() -> {
            browserTwo.setPage(page);
        });
    }
    
    public void updatePage_TAB_THREE(String page){
        Platform.runLater(() -> {
            browserThree.setPage(page);
        });
    }
    
    public void updatePage_TAB_FOUR(String page){
        Platform.runLater(() -> {
            browserFour.setPage(page);
        });
    }
    
    public void updatePage_TAB_FIVE(String page){
        Platform.runLater(() -> {
            browserFive.setPage(page);
        });
    }
    
    public void updatePage_TAB_SIX(String page){
        Platform.runLater(() -> {
            browserSix.setPage(page);
        });
    }
    
    public void updatePage_TAB_SEVEN(String page){
        Platform.runLater(() -> {
            browserSeven.setPage(page);
        });
    }
    
    public void updatePage_TAB_EIGHT(String page){
        Platform.runLater(() -> {
            browserEight.setPage(page);
        });
    }
    
    public void updatePage_TAB_NINE(String page){
        Platform.runLater(() -> {
            browserNine.setPage(page);
        });
    }
    
    public void updatePage_TAB_TEN(String page){
        Platform.runLater(() -> {
            browserTen.setPage(page);
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the JavaFX Browsers.
     */
    @SuppressWarnings("unchecked")
    private void initBrowserPanels(){   
        try {
            this.browserOne = new Browser();
            this.ViewOne.add(this.browserOne.getFXPanel());
            this.browserOne.init(ViewOne);
            this.browserTwo = new Browser();
            this.ViewTwo.add(this.browserTwo.getFXPanel());
            this.browserTwo.init(ViewTwo);

            this.browserThree = new Browser();
            this.ViewThree.add(this.browserThree.getFXPanel());
            this.browserThree.init(ViewThree);

            this.browserFour = new Browser();
            this.ViewFour.add(this.browserFour.getFXPanel());
            this.browserFour.init(ViewFour);

            this.browserFive = new Browser();
            this.ViewFive.add(this.browserFive.getFXPanel());
            this.browserFive.init(ViewFive);

            this.browserSix = new Browser();
            this.ViewSix.add(this.browserSix.getFXPanel());
            this.browserSix.init(ViewSix);

            this.browserSeven = new Browser();
            this.ViewSeven.add(this.browserSeven.getFXPanel());
            this.browserSeven.init(ViewSeven);

            this.browserEight = new Browser();
            this.ViewEight.add(this.browserEight.getFXPanel());
            this.browserEight.init(ViewEight);

            this.browserNine = new Browser();
            this.ViewNine.add(this.browserNine.getFXPanel());
            this.browserNine.init(ViewNine);

            this.browserTen = new Browser();
            this.ViewTen.add(this.browserTen.getFXPanel());
            this.browserTen.init(ViewTen);
            
        } catch (InterruptedException ex) {
            Logger.getLogger(MktStallGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.pack();
        
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent componentEvent) {
                resizeBrowserPanels();
            }
        }); 
    }
    
    private void resizeBrowserPanels(){
        this.browserOne.resizeBrowser(ViewOne);
        this.browserTwo.resizeBrowser(ViewTwo);
        this.browserThree.resizeBrowser(ViewThree);
        this.browserFour.resizeBrowser(ViewFour);
        this.browserFive.resizeBrowser(ViewFive);
        this.browserSix.resizeBrowser(ViewSix);
        this.browserSeven.resizeBrowser(ViewSeven);
        this.browserEight.resizeBrowser(ViewEight);
        this.browserNine.resizeBrowser(ViewNine);
        this.browserTen.resizeBrowser(ViewTen);   
    }
    
    private void initColourPalet(){
        this.setColourPalletAQUA();
    }
    
    private void setColourPalletAQUA(){
        Color fontColour = new Color(Color.lightGray.getRGB());
        this.setBackground(Color.BLACK);
        this.setForeground(Color.BLACK);   
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem OpenResults;
    private javax.swing.JComboBox<String> OrganSelection;
    private javax.swing.JMenuItem StartMenuItem;
    private javax.swing.JTextArea UserInfo;
    private javax.swing.JPanel ViewEight;
    private javax.swing.JPanel ViewFive;
    private javax.swing.JPanel ViewFour;
    private javax.swing.JPanel ViewNine;
    private javax.swing.JPanel ViewOne;
    private javax.swing.JPanel ViewSeven;
    private javax.swing.JPanel ViewSix;
    private javax.swing.JPanel ViewTen;
    private javax.swing.JPanel ViewThree;
    private javax.swing.JPanel ViewTwo;
    private javax.swing.JButton backButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTable navigationTable;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
    // Start of Second variables set
    private Browser browserOne;
    private Browser browserTwo;
    private Browser browserThree;
    private Browser browserFour;
    private Browser browserFive;
    private Browser browserSix;
    private Browser browserSeven;
    private Browser browserEight;
    private Browser browserNine;
    private Browser browserTen;
    private final Engine engine;
    private final JFileChooser fileChooser;
    private final JFileChooser pythonChooser;
    private final Settings settings;
    private final SettingsDialog settingsDialog;
    private ConfigResults currentlySelectedConfig;
    private CountDownLatch latch;
    private int indexNavigationCurrent;
    private int indexHistoryCurrent;
    private final ArrayList<Integer> indexHistory;
    private final HashMap<String, ConfigResults> configMap;
    private int row_index = 0;

    /**
     * Action function for response to events which are listened for by this GUI.
     * This method is the ENTRY POINT for processing the results after a RUN in
     * response to listening for the LEAF_DONE action.
     * @param e an action event.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getActionCommand().equalsIgnoreCase("LEAF_DONE")){   
            this.UserInfo.append("\n.");
            this.enableGUIElements(true);
            this.processResults();           
        }
        if(e.getActionCommand().equalsIgnoreCase("SEED_DONE")){   
            this.UserInfo.append("\n.");
            this.enableGUIElements(true);
            this.processResults();           
        }
        
    }
    
    private boolean listenerAdded = false;
    /**
     * Process the results directory.
     */
    private void processResults(){
        try {
            CountDownLatch _latch = new CountDownLatch(1);
            this.populateTable(_latch);
            _latch.await();
            if(!this.listenerAdded){
                this.navigationTable.getSelectionModel().addListSelectionListener(this);
                this.listenerAdded = true;
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(MktStallGUI.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }
    
    private void populateTable(CountDownLatch latch){
        String organ = (String) this.OrganSelection.getSelectedItem();
        if(organ.equalsIgnoreCase("LEAF")){
            ProcessConfigs processConfigs = new ProcessConfigs(this.settings.getOUTPUT_DIR());
            processConfigs.processSummaryConfig();
            File directory = new File(this.engine.getSettings().getOUTPUT_DIR());
            File[] filesList = directory.listFiles();
            for (File file : filesList) {
                if (file.isFile() && file.getName().endsWith(".config")) {
                    LeafResultsConfigResults res = new LeafResultsConfigResults();
                    try {
                        res.readLeafConfig(file.getAbsolutePath(), latch);
                        String id = res.getID();
                        if(!this.configMap.containsKey(id)){
                            Boolean status = res.get_status_html_shape_path();
                            this.configMap.put(id, (ConfigResults) res);
                            this.navigationTable.getModel().setValueAt(id, row_index, 0);
                            this.navigationTable.getModel().setValueAt(status, row_index, 1);
                            row_index++;
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(MktStallGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (file.isDirectory()) {
                    System.out.println("Directory " + file.getName());
                }
            }
        }
        if(organ.equalsIgnoreCase("SEED")){
            File directory = new File(this.engine.getSettings().getOUTPUT_DIR());
            File[] filesList = directory.listFiles();
            for (File file : filesList) {
                System.err.println(file.getName());
                if (file.isFile() && file.getName().endsWith(".config") && !file.getName().contains("workfile")) {
                    System.err.println("FOUND CONFIG "+file.getName());
                    SeedResultsConfigResults res = new SeedResultsConfigResults();
                    try {
                        res.readSeedConfig(file.getAbsolutePath(), latch);
                        String id = res.getID();
                        System.err.println("ID: "+id);
                        if(!this.configMap.containsKey(id)){
                            System.err.println("hello - adding to navigation table!!!");
                            Boolean status = res.isStatus_path_Summary_Number_of_Seeds();
                            System.err.println("STtus:" +status);
                            this.configMap.put(id, (ConfigResults) res);
                            this.navigationTable.getModel().setValueAt(id, row_index, 0);
                            this.navigationTable.getModel().setValueAt(status, row_index, 1);
                            row_index++;
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(MktStallGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (file.isDirectory()) {
                    System.out.println("Directory " + file.getName());
                }
            }           
        }
        System.out.println("DONEEEEEEEEEEEEEEE");
    }
    
    private void back(){
        latch = new CountDownLatch(1);
        if(!this.indexHistory.isEmpty()){
            if(indexHistoryCurrent > 0){
                this.indexHistoryCurrent--;
                this.indexNavigationCurrent = this.indexHistory.get(this.indexHistoryCurrent);
                this.navigationTable.getSelectionModel().clearSelection();
                this.navigationTable.getSelectionModel().setSelectionInterval(this.indexNavigationCurrent, this.indexNavigationCurrent);
                String organ = (String) this.OrganSelection.getSelectedItem();
                if(organ.equalsIgnoreCase("LEAF")){
                    LeafResultsConfigResults selected = (LeafResultsConfigResults) this.configMap.get( (String) this.navigationTable.getModel().getValueAt(this.indexNavigationCurrent, 0));
                    this.currentlySelectedConfig = selected;
                }
                if(organ.equalsIgnoreCase("SEED")){
                    SeedResultsConfigResults selected = (SeedResultsConfigResults) this.configMap.get( (String) this.navigationTable.getModel().getValueAt(this.indexNavigationCurrent, 0));
                    this.currentlySelectedConfig = selected;
                }
            }
        }
    }
    
    private void forward(){
        latch = new CountDownLatch(1);
        if(!this.indexHistory.isEmpty()){
            if(indexHistoryCurrent < this.indexHistory.size()-1){
                this.indexHistoryCurrent++;
                this.indexNavigationCurrent = this.indexHistory.get(this.indexHistoryCurrent);
                this.navigationTable.getSelectionModel().clearSelection();
                this.navigationTable.getSelectionModel().setSelectionInterval(this.indexNavigationCurrent, this.indexNavigationCurrent);
                String organ = (String) this.OrganSelection.getSelectedItem();
                if(organ.equalsIgnoreCase("LEAF")){
                    LeafResultsConfigResults selected = (LeafResultsConfigResults) this.configMap.get( (String) this.navigationTable.getModel().getValueAt(this.indexNavigationCurrent, 0));
                    this.currentlySelectedConfig = selected;
                }
                if(organ.equalsIgnoreCase("SEED")){
                    SeedResultsConfigResults selected = (SeedResultsConfigResults) this.configMap.get( (String) this.navigationTable.getModel().getValueAt(this.indexNavigationCurrent, 0));
                    this.currentlySelectedConfig = selected;
                }
                
                
            }
        }
    }
    
    private void updateHistory(int currenIndex){
        if(latch != null){
            if(latch.getCount() == 1){
                latch.countDown();
                latch = null;
                return;
            }
        }
        String id = (String) this.navigationTable.getModel().getValueAt(currenIndex, 0);
        if(this.configMap.containsKey(id)){
            if(!this.indexHistory.isEmpty()){
                if(this.indexHistory.get(this.indexHistory.size()-1) != currenIndex){
                    this.indexHistory.add(currenIndex);
                    this.indexNavigationCurrent = currenIndex;
                    this.indexHistoryCurrent = this.indexHistory.size()-1;
                }
            }else{
                this.indexHistory.add(currenIndex);
                this.indexNavigationCurrent = currenIndex;
                this.indexHistoryCurrent = this.indexHistory.size()-1;
            } 
        }
    }
    
    
    
    @Override
    public void valueChanged(ListSelectionEvent e) {

        ListSelectionModel model = (ListSelectionModel) e.getSource();
        int firstIndex = e.getFirstIndex();//old index
        int lastIndex = e.getLastIndex();//new index
        boolean isAdjusting = e.getValueIsAdjusting();
        
        if(isAdjusting){
            if (model.isSelectionEmpty()) {
            } else {
                // Find out which indexes are selected.
                int minIndex = model.getMinSelectionIndex();
                int maxIndex = model.getMaxSelectionIndex();
                for (int i = minIndex; i <= maxIndex; i++) {
                    if (model.isSelectedIndex(i)) {
                        String organ = (String) this.OrganSelection.getSelectedItem();
                        
                        if(organ.equalsIgnoreCase("LEAF")){
                            LeafResultsConfigResults selected = (LeafResultsConfigResults) this.configMap.get( (String) this.navigationTable.getModel().getValueAt(i, 0));
                            if(selected == null){return;}
                            //How to get the value in the navigations table or map
                            //boolean con = this.configMap.containsKey((String)this.navigationTable.getModel().getValueAt(i, 0));
                            try {
                                this.currentlySelectedConfig = selected;
                                if(selected.get_status_html_method_path()){
                                    File f1 = new File(selected.get_html_method_path());
                                    this.updatePage_TAB_ONE(f1.toURI().toURL().toString());
                                }
                                if(selected.get_status_html_margin_path()){
                                    File f2 = new File(selected.get_html_margin_path());
                                    this.updatePage_TAB_TWO(f2.toURI().toURL().toString());
                                }
                                if(selected.get_status_html_morphological_path()){
                                    File f3 = new File(selected.get_html_morphological_path());
                                    this.updatePage_TAB_THREE(f3.toURI().toURL().toString());
                                }
                                if(selected.get_status_html_shape_path()){
                                    File f4 = new File(selected.get_html_shape_path());
                                    this.updatePage_TAB_FOUR(f4.toURI().toURL().toString());
                                }
                                if(selected.get_status_html_summary_table_path()){
                                    File f5 = new File(selected.get_html_summary_table_path());
                                    this.updatePage_TAB_FIVE(f5.toURI().toURL().toString()); 
                                }
                                if(selected.isStatus_html_boxplot_pixels_path()){
                                    File f6 = new File(selected.getHtml_boxplot_pixels_path());
                                    this.updatePage_TAB_SIX(f6.toURI().toURL().toString()); 
                                }
                                if(selected.isStatus_html_boxplot_cm_path()){
                                    File f7 = new File(selected.getHtml_boxplot_cm_path());
                                    System.err.println("Updating browser 7 "+f7.getAbsolutePath());
                                    this.updatePage_TAB_SEVEN(f7.toURI().toURL().toString()); 
                                }
                                this.updateHistory(i);
                                this.UserInfo.append("Selected: " + selected.getID());
                                this.UserInfo.append("\n"); 
                            } catch (MalformedURLException ex) {
                                Logger.getLogger(MktStallGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        if(organ.equalsIgnoreCase("SEED")){
                            
                            ///UPDATE BROWSER PANELS HERE!!
                            SeedResultsConfigResults selected = (SeedResultsConfigResults) this.configMap.get( (String) this.navigationTable.getModel().getValueAt(i, 0));
                            if(selected == null){return;}
                            //How to get the value in the navigations table or map
                            //boolean con = this.configMap.containsKey((String)this.navigationTable.getModel().getValueAt(i, 0));
                            try {
                                this.currentlySelectedConfig = selected;
                                if(selected.isStatus_path_method()){
                                    File f1 = new File(selected.getPath_method());
                                    this.updatePage_TAB_ONE(f1.toURI().toURL().toString());
                                }
                                if(selected.isStatus_path_Accession_table()){
                                    File f2 = new File(selected.getPath_Accession_table());
                                    this.updatePage_TAB_TWO(f2.toURI().toURL().toString());
                                }
                                if(selected.isStatus_path_Accession_Area_Plot()){
                                    File f3 = new File(selected.getPath_Accession_Area_Plot());
                                    this.updatePage_TAB_THREE(f3.toURI().toURL().toString());
                                }
                                if(selected.isStatus_path_Accession_Perimeter_Plot()){
                                    File f4 = new File(selected.getPath_Accession_Perimeter_Plot());
                                    this.updatePage_TAB_FOUR(f4.toURI().toURL().toString());
                                }
                                if(selected.isStatus_path_Accession_EqD_Plot()){
                                    File f5 = new File(selected.getPath_Accession_EqD_Plot());
                                    this.updatePage_TAB_FIVE(f5.toURI().toURL().toString()); 
                                }
                                if(selected.isStatus_path_Summary_Table()){
                                    File f6 = new File(selected.getPath_Summary_Table());
                                    this.updatePage_TAB_SIX(f6.toURI().toURL().toString()); 
                                }
                                if(selected.isStatus_path_Summary_Area_Plot()){
                                    File f7 = new File(selected.getPath_Summary_Area_Plot());
                                    System.err.println("Updating browser 7 "+f7.getAbsolutePath());
                                    this.updatePage_TAB_SEVEN(f7.toURI().toURL().toString()); 
                                }
                                if(selected.isStatus_path_Summary_Perimeter_Plot()){
                                    File f8 = new File(selected.getPath_Summary_Perimeter_Plot());
                                    System.err.println("Updating browser 8 "+f8.getAbsolutePath());
                                    this.updatePage_TAB_EIGHT(f8.toURI().toURL().toString()); 
                                }
                                if(selected.isStatus_path_Summary_EqD_Plot()){
                                    File f9 = new File(selected.getPath_Summary_EqD_Plot());
                                    System.err.println("Updating browser 9 "+f9.getAbsolutePath());
                                    this.updatePage_TAB_NINE(f9.toURI().toURL().toString()); 
                                }
                                if(selected.isStatus_path_Summary_Number_of_Seeds()){
                                    File f10 = new File(selected.getPath_Summary_Number_of_Seeds());
                                    System.err.println("Updating browser 10 "+f10.getAbsolutePath());
                                    this.updatePage_TAB_TEN(f10.toURI().toURL().toString()); 
                                }
                                this.updateHistory(i);
                                this.UserInfo.append("Selected: " + selected.getID());
                                this.UserInfo.append("\n"); 
                            } catch (MalformedURLException ex) {
                                Logger.getLogger(MktStallGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
        }   
    }
    
}
